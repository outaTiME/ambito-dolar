diff --git a/package.json b/package.json
index ac4c60e2cd783d686ac0a18132b4dcd8a5a0e8aa..14d18fc7585670119e8e18458d1ccb7676c6b27b 100644
--- a/package.json
+++ b/package.json
@@ -52,8 +52,8 @@
     "node": ">=12.0.0"
   },
   "optionalDependencies": {
+    "adm-zip": "^0.5.10",
     "archiver": "^5.3.1",
-    "fs-extra": "^10.1.0",
-    "unzipper": "^0.10.11"
+    "fs-extra": "^10.1.0"
   }
 }
diff --git a/src/authStrategies/RemoteAuth.js b/src/authStrategies/RemoteAuth.js
index 99e688ba2fd33a661c54d9a11447a8061accaa34..0e6585325296b29f4fe0de23eef5ed95c81b515f 100644
--- a/src/authStrategies/RemoteAuth.js
+++ b/src/authStrategies/RemoteAuth.js
@@ -3,11 +3,11 @@
 /* Require Optional Dependencies */
 try {
     var fs = require('fs-extra');
-    var unzipper = require('unzipper');
+    var AdmZip = require('adm-zip');
     var archiver = require('archiver');
 } catch {
     fs = undefined;
-    unzipper = undefined;
+    AdmZip = undefined;
     archiver = undefined;
 }
 
@@ -20,12 +20,12 @@ const BaseAuthStrategy = require('./BaseAuthStrategy');
  * @param {object} options - options
  * @param {object} options.store - Remote database store instance
  * @param {string} options.clientId - Client id to distinguish instances if you are using multiple, otherwise keep null if you are using only one instance
- * @param {string} options.dataPath - Change the default path for saving session files, default is: "./.wwebjs_auth/" 
+ * @param {string} options.dataPath - Change the default path for saving session files, default is: "./.wwebjs_auth/"
  * @param {number} options.backupSyncIntervalMs - Sets the time interval for periodic session backups. Accepts values starting from 60000ms {1 minute}
  */
 class RemoteAuth extends BaseAuthStrategy {
     constructor({ clientId, dataPath, store, backupSyncIntervalMs } = {}) {
-        if (!fs && !unzipper && !archiver) throw new Error('Optional Dependencies [fs-extra, unzipper, archiver] are required to use RemoteAuth. Make sure to run npm install correctly and remove the --no-optional flag');
+        if (!fs && !AdmZip && !archiver) throw new Error('Optional Dependencies [fs-extra, adm-zip, archiver] are required to use RemoteAuth. Make sure to run npm install correctly and remove the --no-optional flag');
         super();
 
         const idRegex = /^[-_\w]+$/i;
@@ -154,13 +154,15 @@ class RemoteAuth extends BaseAuthStrategy {
     }
 
     async unCompressSession(compressedSessionPath) {
-        var stream = fs.createReadStream(compressedSessionPath);
         await new Promise((resolve, reject) => {
-            stream.pipe(unzipper.Extract({
-                path: this.userDataDir
-            }))
-                .on('error', err => reject(err))
-                .on('finish', () => resolve());
+            var zip = new AdmZip(compressedSessionPath);
+            zip.extractAllToAsync(this.userDataDir, false, false, (err) => {
+                if (err) {
+                    reject(err);
+                } else {
+                    resolve();
+                }
+            });
         });
         await fs.promises.unlink(compressedSessionPath);
     }
@@ -173,7 +175,7 @@ class RemoteAuth extends BaseAuthStrategy {
                 if (!this.requiredDirs.includes(element)) {
                     const dirElement = path.join(dir, element);
                     const stats = await fs.promises.lstat(dirElement);
-    
+
                     if (stats.isDirectory()) {
                         await fs.promises.rm(dirElement, {
                             recursive: true,
